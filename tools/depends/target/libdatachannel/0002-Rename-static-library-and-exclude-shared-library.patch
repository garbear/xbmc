From a7d4929a7d880b649effa303c480ac8a28e8248f Mon Sep 17 00:00:00 2001
From: Garrett Brown <themagnificentmrb@gmail.com>
Date: Fri, 28 Jul 2023 16:58:01 -0700
Subject: [PATCH 2/2] Rename static library and exclude shared library

---
 CMakeLists.txt | 56 +++-----------------------------------------------
 1 file changed, 3 insertions(+), 53 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index beb6844b..63d33fc1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -258,28 +258,16 @@ else()
 	add_library(Usrsctp::Usrsctp ALIAS usrsctp)
 endif()
 
-add_library(datachannel SHARED
+add_library(datachannel STATIC
 	${LIBDATACHANNEL_SOURCES}
 	${LIBDATACHANNEL_HEADERS}
 	${LIBDATACHANNEL_IMPL_SOURCES}
 	${LIBDATACHANNEL_IMPL_HEADERS})
 set_target_properties(datachannel PROPERTIES
-	VERSION ${PROJECT_VERSION}
-	SOVERSION ${PROJECT_VERSION}
-	CXX_STANDARD 17
-	CXX_VISIBILITY_PRESET default)
-target_compile_definitions(datachannel PRIVATE RTC_EXPORTS)
-
-add_library(datachannel-static STATIC EXCLUDE_FROM_ALL
-	${LIBDATACHANNEL_SOURCES}
-	${LIBDATACHANNEL_HEADERS}
-	${LIBDATACHANNEL_IMPL_SOURCES}
-	${LIBDATACHANNEL_IMPL_HEADERS})
-set_target_properties(datachannel-static PROPERTIES
 	VERSION ${PROJECT_VERSION}
 	CXX_STANDARD 17)
-target_compile_definitions(datachannel-static PRIVATE RTC_EXPORTS)
-target_compile_definitions(datachannel-static PUBLIC RTC_STATIC)
+target_compile_definitions(datachannel PRIVATE RTC_EXPORTS)
+target_compile_definitions(datachannel PUBLIC RTC_STATIC)
 
 target_include_directories(datachannel PUBLIC
     $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
@@ -289,33 +277,20 @@ target_include_directories(datachannel PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src)
 target_link_libraries(datachannel PRIVATE Threads::Threads)
 target_link_libraries(datachannel PRIVATE Usrsctp::Usrsctp plog::plog)
 
-target_include_directories(datachannel-static PUBLIC
-    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
-    $<INSTALL_INTERFACE:include>)
-target_include_directories(datachannel-static PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/include/rtc)
-target_include_directories(datachannel-static PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src)
-target_link_libraries(datachannel-static PRIVATE Threads::Threads)
-target_link_libraries(datachannel-static PRIVATE Usrsctp::Usrsctp plog::plog)
-
 if(WIN32)
 	target_link_libraries(datachannel PUBLIC ws2_32) # winsock2
-	target_link_libraries(datachannel-static PUBLIC ws2_32) # winsock2
 endif()
 
 if (NO_WEBSOCKET)
 	target_compile_definitions(datachannel PUBLIC RTC_ENABLE_WEBSOCKET=0)
-	target_compile_definitions(datachannel-static PUBLIC RTC_ENABLE_WEBSOCKET=0)
 else()
 	target_compile_definitions(datachannel PUBLIC RTC_ENABLE_WEBSOCKET=1)
-	target_compile_definitions(datachannel-static PUBLIC RTC_ENABLE_WEBSOCKET=1)
 endif()
 
 if(NO_MEDIA)
 	target_compile_definitions(datachannel PUBLIC RTC_ENABLE_MEDIA=0)
-	target_compile_definitions(datachannel-static PUBLIC RTC_ENABLE_MEDIA=0)
 else()
 	target_compile_definitions(datachannel PUBLIC RTC_ENABLE_MEDIA=1)
-	target_compile_definitions(datachannel-static PUBLIC RTC_ENABLE_MEDIA=1)
 	if(USE_SYSTEM_SRTP)
 		find_package(libSRTP REQUIRED)
 		if(NOT TARGET libSRTP::srtp2)
@@ -326,15 +301,11 @@ else()
 				IMPORTED_LOCATION ${SRTP_LIBRARIES})
 		endif()
 		target_compile_definitions(datachannel PRIVATE RTC_SYSTEM_SRTP=1)
-		target_compile_definitions(datachannel-static PRIVATE RTC_SYSTEM_SRTP=1)
 		target_link_libraries(datachannel PRIVATE libSRTP::srtp2)
-		target_link_libraries(datachannel-static PRIVATE libSRTP::srtp2)
 	else()
 		add_subdirectory(deps/libsrtp EXCLUDE_FROM_ALL)
 		target_compile_definitions(datachannel PRIVATE RTC_SYSTEM_SRTP=0)
-		target_compile_definitions(datachannel-static PRIVATE RTC_SYSTEM_SRTP=0)
 		target_link_libraries(datachannel PRIVATE srtp2)
-		target_link_libraries(datachannel-static PRIVATE srtp2)
 	endif()
 endif()
 
@@ -349,22 +320,17 @@ if (USE_GNUTLS)
 			IMPORTED_LOCATION "${GNUTLS_LIBRARIES}")
 	endif()
 	target_compile_definitions(datachannel PRIVATE USE_GNUTLS=1)
-	target_compile_definitions(datachannel-static PRIVATE USE_GNUTLS=1)
 	target_link_libraries(datachannel PRIVATE GnuTLS::GnuTLS)
-	target_link_libraries(datachannel-static PRIVATE GnuTLS::GnuTLS)
 	if (NOT NO_WEBSOCKET)
 		# Needed for SHA1, it should be present as GnuTLS cryptography backend
 		find_package(Nettle REQUIRED)
 		target_link_libraries(datachannel PRIVATE Nettle::Nettle)
-		target_link_libraries(datachannel-static PRIVATE Nettle::Nettle)
 	endif()
 elseif(USE_MBEDTLS)
 	find_package(MbedTLS 3 REQUIRED)
 
 	target_compile_definitions(datachannel PRIVATE USE_MBEDTLS)
-	target_compile_definitions(datachannel-static PRIVATE USE_MBEDTLS)
 	target_link_libraries(datachannel PRIVATE MbedTLS::MbedTLS)
-	target_link_libraries(datachannel-static PRIVATE MbedTLS::MbedTLS)
 else()
 	if(APPLE)
 		# This is a bug in CMake that causes it to prefer the system version over
@@ -384,58 +350,42 @@ else()
 	endif()
 	find_package(OpenSSL REQUIRED)
 	target_compile_definitions(datachannel PRIVATE USE_GNUTLS=0)
-	target_compile_definitions(datachannel-static PRIVATE USE_GNUTLS=0)
 	target_link_libraries(datachannel PRIVATE OpenSSL::SSL)
-	target_link_libraries(datachannel-static PRIVATE OpenSSL::SSL)
 endif()
 
 if (USE_NICE)
 	find_package(LibNice REQUIRED)
 	target_compile_definitions(datachannel PRIVATE USE_NICE=1)
-	target_compile_definitions(datachannel-static PRIVATE USE_NICE=1)
 	target_link_libraries(datachannel PRIVATE LibNice::LibNice)
-	target_link_libraries(datachannel-static PRIVATE LibNice::LibNice)
 else()
 	target_compile_definitions(datachannel PRIVATE USE_NICE=0)
-	target_compile_definitions(datachannel-static PRIVATE USE_NICE=0)
 	if(USE_SYSTEM_JUICE)
 		find_package(LibJuice REQUIRED)
 		target_compile_definitions(datachannel PRIVATE RTC_SYSTEM_JUICE=1)
-		target_compile_definitions(datachannel-static PRIVATE RTC_SYSTEM_JUICE=1)
 		target_link_libraries(datachannel PRIVATE LibJuice::LibJuice)
-		target_link_libraries(datachannel-static PRIVATE LibJuice::LibJuice)
 	else()
 		add_subdirectory(deps/libjuice EXCLUDE_FROM_ALL)
 		target_compile_definitions(datachannel PRIVATE RTC_SYSTEM_JUICE=0)
-		target_compile_definitions(datachannel-static PRIVATE RTC_SYSTEM_JUICE=0)
 		target_link_libraries(datachannel PRIVATE LibJuice::LibJuiceStatic)
-		target_link_libraries(datachannel-static PRIVATE LibJuice::LibJuiceStatic)
 	endif()
 endif()
 
 if(CAPI_STDCALL)
 	target_compile_definitions(datachannel PUBLIC CAPI_STDCALL)
-	target_compile_definitions(datachannel-static PUBLIC CAPI_STDCALL)
 endif()
 
 set_target_properties(datachannel PROPERTIES EXPORT_NAME LibDataChannel)
 add_library(LibDataChannel::LibDataChannel ALIAS datachannel)
 
-set_target_properties(datachannel-static PROPERTIES EXPORT_NAME LibDataChannelStatic)
-add_library(LibDataChannel::LibDataChannelStatic ALIAS datachannel-static)
-
 if(NOT MSVC)
 	target_compile_options(datachannel PRIVATE -Wall -Wextra)
-	target_compile_options(datachannel-static PRIVATE -Wall -Wextra)
 endif()
 
 if(WARNINGS_AS_ERRORS)
 	if(MSVC)
 		target_compile_options(datachannel PRIVATE /WX)
-		target_compile_options(datachannel-static PRIVATE /WX)
 	else()
 		target_compile_options(datachannel PRIVATE -Werror)
-		target_compile_options(datachannel-static PRIVATE -Werror)
 	endif()
 endif()
 
-- 
2.34.1

